#!/usr/bin/env php
<?php

$opts = parseOpts();

$prod = diff('packages', $opts['from'], $opts['to'], $opts['path']);

$changeLog = '';

$out = "# " . $opts['new-version'] . PHP_EOL;
$out .= shell_exec('git log ' .  $opts['old-version'] . '..' . $opts['new-version'] . ' --pretty=format:"* %s | %an - %ci | Hash: %h" --abbrev-commit --date=local');

$changeLog .= $out . PHP_EOL;

foreach ($prod as $package => $commits) {
    $path = explode('/', $package);
    $path = str_replace('-', '_', $path[1]);
    
    if(is_dir('typo3conf/ext/' . $path)) {
        $out = shell_exec('git --git-dir typo3conf/ext/' . $path . '/.git log ' .  $commits[0] . '..' . $commits[1] . ' --pretty=format:"* %s | %an - %ci | Hash: %h" --abbrev-commit --date=local');
        $changeLog .= "###### " . $path . PHP_EOL . $out . PHP_EOL . PHP_EOL;
    }
    
}

file_put_contents('CHANGELOG.md', $changeLog, FILE_APPEND);

function diff($key, $from, $to, $base_path) {

    $pkgs = array();

    $data = load($from, $base_path);

    foreach($data->$key as $pkg) {
        $pkgs[$pkg->name] = array(version($pkg), 'REMOVED', '');
    }

    $data = load($to, $base_path);

    foreach($data->$key as $pkg) {
        if (! array_key_exists($pkg->name, $pkgs)) {
            $pkgs[$pkg->name] = array('NEW', version($pkg), '');
            continue;
        }

        if ($pkgs[$pkg->name][0] == version($pkg)) {
            unset($pkgs[$pkg->name]);
        } else {
            $pkgs[$pkg->name][1] = version($pkg);
            $pkgs[$pkg->name][2] = makeCompareUrl($pkg, $pkgs);
        }
    }

    return $pkgs;
}

function version($pkg)
{
    if(substr($pkg->version,0,4) == 'dev-') {
        $version = substr($pkg->source->reference,0,7) ?: '';
    } else {
        $version = (string) $pkg->version;
    }

    return $version;
}


function load($fileish, $base_path = '') {
    $orig = $fileish;

    if (empty($base_path)) {
        $base_path = '.' . DIRECTORY_SEPARATOR;
    } else {
        $base_path = rtrim($base_path, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
    }

    if (empty($fileish)) {
        $fileish = $base_path . 'composer.lock';
    }

    if (file_exists($fileish)) {
        return mustDecodeJson(file_get_contents($fileish), $fileish);
    }

    if (strpos($orig, ':') === false) {
        $fileish .= ':' . $base_path . 'composer.lock';
    }

    $lines = '';

    exec('git show '. escapeshellarg($fileish), $lines, $exit);

    if ($exit !== 0) {
        error_log("Error: cannot open $orig or find it in git as $fileish");
        exit(1);
    }

    return mustDecodeJson(implode("\n", $lines), $fileish);
}

function mustDecodeJson($json, $context) {
    $data = json_decode($json);

    if (empty($data)) {
        error_log("Error: contents from $context does not decode as json");
        exit(1);
    }

    return $data;
}

function makeCompareUrl($pkg, $diff) {
    $func = 'formatCompare' . ucfirst(getSourceRepoType($pkg->source->url));
    return call_user_func($func, $pkg->source->url, $diff[$pkg->name][0], $diff[$pkg->name][1]);
}

function getSourceRepoType($url) {
    if (! preg_match('/^http/i', $url)) {
        return 'unknown';
    }

    $host = strtolower(parse_url($url, PHP_URL_HOST));

    if (strpos($host, 'github') !== false) {
        return 'github';
    } elseif (strpos($host, 'bitbucket') !== false) {
        return 'bitbucket';
    } elseif (strpos($host, 'gitlab') !== false) {
        return 'gitlab';
    }

    return 'unknown';
}

function formatCompareUnknown($url, $from, $to) {
    return '';
}

function formatCompareGithub($url, $from, $to) {
    return sprintf('%s/compare/%s...%s', preg_replace('/\.git$/', '', $url), urlencode($from), urlencode($to));
}

function formatCompareBitbucket($url, $from, $to) {
    return sprintf('%s/branches/compare/%s%%0D%s', preg_replace('/\.git$/', '', $url), urlencode($from), urlencode($to));
}

function formatCompareGitlab($url, $from, $to) {
    return sprintf('%s/compare/%s...%s', preg_replace('/\.git$/', '', $url), urlencode($from), urlencode($to));
}

function parseOpts() {
    $given = getopt('hp:', array('path:', 'from:', 'to:', 'old-version:', 'new-version:', 'md', 'json', 'pretty', 'no-links', 'help'));

    foreach(array('help' => 'h', 'path' => 'p') as $long => $short) {
        if (array_key_exists($short, $given)) {
            $given[$long] = $given[$short];
            unset($given[$short]);
        }
    }

    if (array_key_exists('help', $given)) {
        usage();
    }

    return array(
        'path' => array_key_exists('path', $given) ? $given['path'] : '',
        'from' => array_key_exists('from', $given) ? $given['from'] : 'HEAD',
        'to' => array_key_exists('to', $given) ? $given['to'] : '',
        'md' => array_key_exists('md', $given),
        'old-version' => array_key_exists('old-version', $given) ? $given['old-version'] : false,
        'new-version' => array_key_exists('new-version', $given) ? $given['new-version'] : false,
        'json' => array_key_exists('json', $given),
        'pretty' => version_compare(PHP_VERSION, '5.4.0', '>=') && array_key_exists('pretty', $given),
        'no-links' => array_key_exists('no-links', $given),
    );
}

function usage() {
    print <<<EOF
Usage: composer-lock-diff [options]

Options:
  -h --help  Print this message
  --path, -p Base to with which to prefix paths. Default "./"
             E.g. `-p app` would look for HEAD:app/composer.lock and app/composer.lock
  --from     The file, git ref, or git ref with filename to compare from (HEAD:composer.lock)
  --to       The file, git ref, or git ref with filename to compare to (composer.lock)
  --json     Format output as JSON
  --pretty   Pretty print JSON output (PHP >= 5.4.0)
  --md       Use markdown instead of plain text
  --no-links Don't include Compare links in plain text or any links in markdown

EOF;

    exit(0);
}

